# app/routes/rag_routes.py
from flask import Blueprint, request, render_template
from app.services.file_processor import extract_text  # eski: extract_text_from_pdf
from app.rag.embedder import get_embeddings
from app.rag.retriever import build_faiss_index, search_similar
from app.rag.llm_answerer import generate_answer
from app.auth.decorators import login_required
import os, json


rag_bp = Blueprint("rag", __name__)


@rag_bp.route("/upload", methods=["GET", "POST"])
@login_required
def upload():
    if request.method == "POST":
        files = request.files.getlist("files")
        job_description = request.form.get("job_description")


        texts = []
        for file in files:
            text = extract_text(file)
            texts.append(text)


        embeddings = get_embeddings(texts) # CVâ€™lerden Ã§Ä±karÄ±lan metinlerin embedding vektÃ¶rleri oluÅŸturuluyor.
        index = build_faiss_index(embeddings) # embeddings vektÃ¶rlerini kullanarak FAISS veritabanÄ± kurulur. Bu, benzerlik sorgularÄ±nda kullanÄ±lacak.
        query_emb = get_embeddings([job_description])[0]
        top_indices = search_similar(index, query_emb, k=len(texts)) # top_indices: En benzerden en az benzer olana sÄ±ralÄ± index listesi dÃ¶ner (Ã¶rn. [2, 0, 1] gibi).


        top_cvs = [texts[i] for i in top_indices] # ğŸ”¢ top_indices Bu, FAISS ile yapÄ±lan benzerlik aramasÄ±nÄ±n sonucudur. Yani iÅŸ ilanÄ±na en uygun CVâ€™lerin index sÄ±ralamasÄ±dÄ±r. Ã–rnek (sÄ±ralÄ±): top_indices = [2, 0, 1] Bu ne demek? "Ä°ÅŸ ilanÄ±na en uygun CV = texts[2], sonra texts[0], sonra texts[1]" ğŸ§© 1. top_cvs = [texts[i] for i in top_indices] Bu satÄ±r, top_indices listesindeki sÄ±ralamaya gÃ¶re texts listesinden en uygun CVâ€™leri alÄ±r. Ã–rnek: top_cvs = [ texts[2],  # "CV3 iÃ§eriÄŸi" texts[0],  # "CV1 iÃ§eriÄŸi" texts[1]   # "CV2 iÃ§eriÄŸi" ] Yani artÄ±k top_cvs listemiz, Ã¶nce en uygun, sonra daha az uygun olan CV metinlerini iÃ§eriyor.
        context = "\n\n".join(top_cvs) # top_cvs listesindeki tÃ¼m metinleri, aralarÄ±na 2 satÄ±r boÅŸluk (\n\n) koyarak tek bir metin haline getiriyor. Bu da LLM'e "iÅŸte sana context olarak bu CV'ler!" demek. Ã–rnek: context = ( "CV3 iÃ§eriÄŸi: C++, Linux...\n\n" "CV1 iÃ§eriÄŸi: Python, SQL...\n\n" "CV2 iÃ§eriÄŸi: Java, AWS...")
        answer = generate_answer(context, job_description, "Bu ilana en uygun aday kim?")


        return render_template("results.html", answer=answer)
    return render_template("upload.html")